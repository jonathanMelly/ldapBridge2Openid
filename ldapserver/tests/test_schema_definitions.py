import unittest

import ldapserver
from ldapserver.schema.definitions import SyntaxDefinition, MatchingRuleDefinition, MatchingRuleKind

class TestSyntaxDefinition(unittest.TestCase):
	def test_str(self):
		self.assertEqual(str(SyntaxDefinition('1.2.3.4')), "( 1.2.3.4 )")
		self.assertEqual(str(SyntaxDefinition('1.2.3.4', desc="")), "( 1.2.3.4 )")
		self.assertEqual(str(SyntaxDefinition('1.2.3.4', desc="foo bar")),
		                 "( 1.2.3.4 DESC 'foo bar' )")
		self.assertEqual(str(SyntaxDefinition('1.2.3.4', desc="foo's bar")),
		                 "( 1.2.3.4 DESC 'foo\\27s bar' )")
		self.assertEqual(str(SyntaxDefinition('1.2.3.4', desc="foobar", extensions={'X-FOO': ['foo bar', 'foobar']})),
		                 "( 1.2.3.4 DESC 'foobar' X-FOO ( 'foo bar' 'foobar' ) )")

	def test_first_component_oid(self):
		self.assertEqual(SyntaxDefinition('1.2.3.4').oid, '1.2.3.4')

	def test_compatability_tags(self):
		self.assertEqual(SyntaxDefinition('1.2.3.4').compatability_tags, {'1.2.3.4'})
		self.assertEqual(SyntaxDefinition('1.2.3.4', extra_compatability_tags={'4.3.2.1', 'foo'}).compatability_tags, {'1.2.3.4', '4.3.2.1', 'foo'})

syntax = ldapserver.schema.syntaxes.DirectoryString

class TestMatchingRuleDefinition(unittest.TestCase):
	def test_str(self):
		self.assertEqual(str(MatchingRuleDefinition('1.2.3.4', name=['fooBarMatch'], desc="Matching rule's description", obsolete=True, syntax='1.3.6.1.4.1.1466.115.121.1.15', extensions={'X-FOO': ['foo bar', 'foobar']}, kind=MatchingRuleKind.EQUALITY)),
		                 "( 1.2.3.4 NAME 'fooBarMatch' DESC 'Matching rule\\27s description' OBSOLETE SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 X-FOO ( 'foo bar' 'foobar' ) )")
		self.assertEqual(str(MatchingRuleDefinition('1.2.3.4', name=['fooMatch', 'fooBarMatch'], syntax='1.3.6.1.4.1.1466.115.121.1.15', kind=MatchingRuleKind.EQUALITY)),
		                 "( 1.2.3.4 NAME ( 'fooMatch' 'fooBarMatch' ) SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )")

	def test_first_component_oid(self):
		self.assertEqual(MatchingRuleDefinition('1.2.3.4', syntax='1.3.6.1.4.1.1466.115.121.1.15', kind=MatchingRuleKind.EQUALITY).first_component_oid, '1.2.3.4')

	def test_compatability_tags(self):
		self.assertEqual(MatchingRuleDefinition('1.2.3.4', syntax='1.3.6.1.4.1.1466.115.121.1.15', kind=MatchingRuleKind.EQUALITY).compatability_tag, '1.3.6.1.4.1.1466.115.121.1.15')
		self.assertEqual(MatchingRuleDefinition('1.2.3.4', syntax='1.3.6.1.4.1.1466.115.121.1.15', compatability_tag='foo', kind=MatchingRuleKind.EQUALITY).compatability_tag, 'foo')

class TestAttributeTypeDefinition(unittest.TestCase):
	pass # TODO

class TestObjectClassDefinition(unittest.TestCase):
	pass # TODO

class TestBuiltin(unittest.TestCase):
	def test_encoding(self):
		schemas = [
			ldapserver.schema.RFC4512_SCHEMA,
			ldapserver.schema.RFC4519_SCHEMA,
			ldapserver.schema.RFC4523_SCHEMA,
			ldapserver.schema.RFC4524_SCHEMA,
			ldapserver.schema.RFC3112_SCHEMA,
			ldapserver.schema.RFC2079_SCHEMA,
			ldapserver.schema.RFC2798_SCHEMA,
			ldapserver.schema.RFC2307BIS_SCHEMA,
		]
		for schema in schemas:
			for obj in schema.syntax_definitions:
				str(obj)
			for obj in schema.matching_rule_definitions:
				str(obj)
			for obj in schema.attribute_type_definitions:
				str(obj)
			for obj in schema.object_class_definitions:
				str(obj)

# Test correctness and completeness of bundled schemas based on IANA registry
class TestOIDs(unittest.TestCase):
	def test_core(self):
		schema = ldapserver.schema.RFC4512_SCHEMA
		# Matching rules (RFC4517)
		self.assertIn('bitStringMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['bitStringMatch'].oid, '2.5.13.16')
		self.assertIn('booleanMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['booleanMatch'].oid, '2.5.13.13')
		self.assertIn('caseExactIA5Match', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseExactIA5Match'].oid, '1.3.6.1.4.1.1466.109.114.1')
		self.assertIn('caseExactMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseExactMatch'].oid, '2.5.13.5')
		self.assertIn('caseExactOrderingMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseExactOrderingMatch'].oid, '2.5.13.6')
		self.assertIn('caseExactSubstringsMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseExactSubstringsMatch'].oid, '2.5.13.7')
		self.assertIn('caseIgnoreIA5Match', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreIA5Match'].oid, '1.3.6.1.4.1.1466.109.114.2')
		self.assertIn('caseIgnoreIA5SubstringsMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreIA5SubstringsMatch'].oid, '1.3.6.1.4.1.1466.109.114.3')
		self.assertIn('caseIgnoreListMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreListMatch'].oid, '2.5.13.11')
		self.assertIn('caseIgnoreListSubstringsMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreListSubstringsMatch'].oid, '2.5.13.12')
		self.assertIn('caseIgnoreMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreMatch'].oid, '2.5.13.2')
		self.assertIn('caseIgnoreOrderingMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreOrderingMatch'].oid, '2.5.13.3')
		self.assertIn('caseIgnoreSubstringsMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['caseIgnoreSubstringsMatch'].oid, '2.5.13.4')
		self.assertIn('directoryStringFirstComponentMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['directoryStringFirstComponentMatch'].oid, '2.5.13.31')
		self.assertIn('distinguishedNameMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['distinguishedNameMatch'].oid, '2.5.13.1')
		self.assertIn('generalizedTimeMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['generalizedTimeMatch'].oid, '2.5.13.27')
		self.assertIn('generalizedTimeOrderingMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['generalizedTimeOrderingMatch'].oid, '2.5.13.28')
		self.assertIn('integerFirstComponentMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['integerFirstComponentMatch'].oid, '2.5.13.29')
		self.assertIn('integerMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['integerMatch'].oid, '2.5.13.14')
		self.assertIn('integerOrderingMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['integerOrderingMatch'].oid, '2.5.13.15')
		self.assertIn('keywordMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['keywordMatch'].oid, '2.5.13.33')
		self.assertIn('numericStringMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['numericStringMatch'].oid, '2.5.13.8')
		self.assertIn('numericStringOrderingMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['numericStringOrderingMatch'].oid, '2.5.13.9')
		self.assertIn('numericStringSubstringsMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['numericStringSubstringsMatch'].oid, '2.5.13.10')
		self.assertIn('objectIdentifierFirstComponentMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['objectIdentifierFirstComponentMatch'].oid, '2.5.13.30')
		self.assertIn('objectIdentifierMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['objectIdentifierMatch'].oid, '2.5.13.0')
		self.assertIn('octetStringMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['octetStringMatch'].oid, '2.5.13.17')
		self.assertIn('octetStringOrderingMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['octetStringOrderingMatch'].oid, '2.5.13.18')
		self.assertIn('telephoneNumberMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['telephoneNumberMatch'].oid, '2.5.13.20')
		self.assertIn('telephoneNumberSubstringsMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['telephoneNumberSubstringsMatch'].oid, '2.5.13.21')
		self.assertIn('uniqueMemberMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['uniqueMemberMatch'].oid, '2.5.13.23')
		self.assertIn('wordMatch', schema.matching_rules)
		self.assertEqual(schema.matching_rules['wordMatch'].oid, '2.5.13.32')
		# Attribute types (RFC4512)
		self.assertIn('aliasedObjectName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['aliasedObjectName'].oid, '2.5.4.1')
		self.assertIn('altServer', schema.attribute_types)
		self.assertEqual(schema.attribute_types['altServer'].oid, '1.3.6.1.4.1.1466.101.120.6')
		self.assertIn('attributeTypes', schema.attribute_types)
		self.assertEqual(schema.attribute_types['attributeTypes'].oid, '2.5.21.5')
		self.assertIn('createTimestamp', schema.attribute_types)
		self.assertEqual(schema.attribute_types['createTimestamp'].oid, '2.5.18.1')
		self.assertIn('creatorsName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['creatorsName'].oid, '2.5.18.3')
		self.assertIn('dITContentRules', schema.attribute_types)
		self.assertEqual(schema.attribute_types['dITContentRules'].oid, '2.5.21.2')
		self.assertIn('dITStructureRules', schema.attribute_types)
		self.assertEqual(schema.attribute_types['dITStructureRules'].oid, '2.5.21.1')
		self.assertIn('governingStructureRule', schema.attribute_types)
		self.assertEqual(schema.attribute_types['governingStructureRule'].oid, '2.5.21.10')
		self.assertIn('ldapSyntaxes', schema.attribute_types)
		self.assertEqual(schema.attribute_types['ldapSyntaxes'].oid, '1.3.6.1.4.1.1466.101.120.16')
		self.assertIn('matchingRules', schema.attribute_types)
		self.assertEqual(schema.attribute_types['matchingRules'].oid, '2.5.21.4')
		self.assertIn('matchingRuleUse', schema.attribute_types)
		self.assertEqual(schema.attribute_types['matchingRuleUse'].oid, '2.5.21.8')
		self.assertIn('modifiersName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['modifiersName'].oid, '2.5.18.4')
		self.assertIn('modifyTimestamp', schema.attribute_types)
		self.assertEqual(schema.attribute_types['modifyTimestamp'].oid, '2.5.18.2')
		self.assertIn('nameForms', schema.attribute_types)
		self.assertEqual(schema.attribute_types['nameForms'].oid, '2.5.21.7')
		self.assertIn('namingContexts', schema.attribute_types)
		self.assertEqual(schema.attribute_types['namingContexts'].oid, '1.3.6.1.4.1.1466.101.120.5')
		self.assertIn('objectClass', schema.attribute_types)
		self.assertEqual(schema.attribute_types['objectClass'].oid, '2.5.4.0')
		self.assertIn('objectClasses', schema.attribute_types)
		self.assertEqual(schema.attribute_types['objectClasses'].oid, '2.5.21.6')
		self.assertIn('structuralObjectClass', schema.attribute_types)
		self.assertEqual(schema.attribute_types['structuralObjectClass'].oid, '2.5.21.9')
		self.assertIn('subschemaSubentry', schema.attribute_types)
		self.assertEqual(schema.attribute_types['subschemaSubentry'].oid, '2.5.18.10')
		self.assertIn('supportedControl', schema.attribute_types)
		self.assertEqual(schema.attribute_types['supportedControl'].oid, '1.3.6.1.4.1.1466.101.120.13')
		self.assertIn('supportedExtension', schema.attribute_types)
		self.assertEqual(schema.attribute_types['supportedExtension'].oid, '1.3.6.1.4.1.1466.101.120.7')
		self.assertIn('supportedFeatures', schema.attribute_types)
		self.assertEqual(schema.attribute_types['supportedFeatures'].oid, '1.3.6.1.4.1.4203.1.3.5')
		self.assertIn('supportedLDAPVersion', schema.attribute_types)
		self.assertEqual(schema.attribute_types['supportedLDAPVersion'].oid, '1.3.6.1.4.1.1466.101.120.15')
		self.assertIn('supportedSASLMechanisms', schema.attribute_types)
		self.assertEqual(schema.attribute_types['supportedSASLMechanisms'].oid, '1.3.6.1.4.1.1466.101.120.14')
		# Object classes (RFC4512)
		self.assertIn('alias', schema.object_classes)
		self.assertEqual(schema.object_classes['alias'].oid, '2.5.6.1')
		self.assertIn('extensibleObject', schema.object_classes)
		self.assertEqual(schema.object_classes['extensibleObject'].oid, '1.3.6.1.4.1.1466.101.120.111')
		self.assertIn('subschema', schema.object_classes)
		self.assertEqual(schema.object_classes['subschema'].oid, '2.5.20.1')
		self.assertIn('top', schema.object_classes)
		self.assertEqual(schema.object_classes['top'].oid, '2.5.6.0')

	def test_rfc4519(self):
		schema = ldapserver.schema.RFC4519_SCHEMA
		# Attribute types
		self.assertIn('businessCategory', schema.attribute_types)
		self.assertEqual(schema.attribute_types['businessCategory'].oid, '2.5.4.15')
		self.assertIn('c', schema.attribute_types)
		self.assertEqual(schema.attribute_types['c'].oid, '2.5.4.6')
		self.assertIn('cn', schema.attribute_types)
		self.assertEqual(schema.attribute_types['cn'].oid, '2.5.4.3')
		self.assertIn('commonName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['commonName'].oid, '2.5.4.3')
		self.assertIn('countryName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['countryName'].oid, '2.5.4.6')
		self.assertIn('DC', schema.attribute_types)
		self.assertEqual(schema.attribute_types['DC'].oid, '0.9.2342.19200300.100.1.25')
		self.assertIn('description', schema.attribute_types)
		self.assertEqual(schema.attribute_types['description'].oid, '2.5.4.13')
		self.assertIn('destinationIndicator', schema.attribute_types)
		self.assertEqual(schema.attribute_types['destinationIndicator'].oid, '2.5.4.27')
		self.assertIn('distinguishedName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['distinguishedName'].oid, '2.5.4.49')
		self.assertIn('dnQualifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['dnQualifier'].oid, '2.5.4.46')
		self.assertIn('domainComponent', schema.attribute_types)
		self.assertEqual(schema.attribute_types['domainComponent'].oid, '0.9.2342.19200300.100.1.25')
		self.assertIn('enhancedSearchGuide', schema.attribute_types)
		self.assertEqual(schema.attribute_types['enhancedSearchGuide'].oid, '2.5.4.47')
		self.assertIn('facsimileTelephoneNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['facsimileTelephoneNumber'].oid, '2.5.4.23')
		self.assertIn('generationQualifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['generationQualifier'].oid, '2.5.4.44')
		self.assertIn('givenName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['givenName'].oid, '2.5.4.42')
		self.assertIn('houseIdentifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['houseIdentifier'].oid, '2.5.4.51')
		self.assertIn('initials', schema.attribute_types)
		self.assertEqual(schema.attribute_types['initials'].oid, '2.5.4.43')
		self.assertIn('internationaliSDNNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['internationaliSDNNumber'].oid, '2.5.4.25')
		self.assertIn('L', schema.attribute_types)
		self.assertEqual(schema.attribute_types['L'].oid, '2.5.4.7')
		self.assertIn('localityName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['localityName'].oid, '2.5.4.7')
		self.assertIn('member', schema.attribute_types)
		self.assertEqual(schema.attribute_types['member'].oid, '2.5.4.31')
		self.assertIn('name', schema.attribute_types)
		self.assertEqual(schema.attribute_types['name'].oid, '2.5.4.41')
		self.assertIn('o', schema.attribute_types)
		self.assertEqual(schema.attribute_types['o'].oid, '2.5.4.10')
		self.assertIn('organizationalUnitName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['organizationalUnitName'].oid, '2.5.4.11')
		self.assertIn('organizationName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['organizationName'].oid, '2.5.4.10')
		self.assertIn('ou', schema.attribute_types)
		self.assertEqual(schema.attribute_types['ou'].oid, '2.5.4.11')
		self.assertIn('owner', schema.attribute_types)
		self.assertEqual(schema.attribute_types['owner'].oid, '2.5.4.32')
		self.assertIn('physicalDeliveryOfficeName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['physicalDeliveryOfficeName'].oid, '2.5.4.19')
		self.assertIn('postalAddress', schema.attribute_types)
		self.assertEqual(schema.attribute_types['postalAddress'].oid, '2.5.4.16')
		self.assertIn('postalCode', schema.attribute_types)
		self.assertEqual(schema.attribute_types['postalCode'].oid, '2.5.4.17')
		self.assertIn('postOfficeBox', schema.attribute_types)
		self.assertEqual(schema.attribute_types['postOfficeBox'].oid, '2.5.4.18')
		self.assertIn('preferredDeliveryMethod', schema.attribute_types)
		self.assertEqual(schema.attribute_types['preferredDeliveryMethod'].oid, '2.5.4.28')
		self.assertIn('registeredAddress', schema.attribute_types)
		self.assertEqual(schema.attribute_types['registeredAddress'].oid, '2.5.4.26')
		self.assertIn('roleOccupant', schema.attribute_types)
		self.assertEqual(schema.attribute_types['roleOccupant'].oid, '2.5.4.33')
		self.assertIn('searchGuide', schema.attribute_types)
		self.assertEqual(schema.attribute_types['searchGuide'].oid, '2.5.4.14')
		self.assertIn('seeAlso', schema.attribute_types)
		self.assertEqual(schema.attribute_types['seeAlso'].oid, '2.5.4.34')
		self.assertIn('serialNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['serialNumber'].oid, '2.5.4.5')
		self.assertIn('sn', schema.attribute_types)
		self.assertEqual(schema.attribute_types['sn'].oid, '2.5.4.4')
		self.assertIn('st', schema.attribute_types)
		self.assertEqual(schema.attribute_types['st'].oid, '2.5.4.8')
		self.assertIn('street', schema.attribute_types)
		self.assertEqual(schema.attribute_types['street'].oid, '2.5.4.9')
		self.assertIn('surname', schema.attribute_types)
		self.assertEqual(schema.attribute_types['surname'].oid, '2.5.4.4')
		self.assertIn('telephoneNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['telephoneNumber'].oid, '2.5.4.20')
		self.assertIn('teletexTerminalIdentifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['teletexTerminalIdentifier'].oid, '2.5.4.22')
		self.assertIn('telexNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['telexNumber'].oid, '2.5.4.21')
		self.assertIn('title', schema.attribute_types)
		self.assertEqual(schema.attribute_types['title'].oid, '2.5.4.12')
		self.assertIn('uid', schema.attribute_types)
		self.assertEqual(schema.attribute_types['uid'].oid, '0.9.2342.19200300.100.1.1')
		self.assertIn('uniqueMember', schema.attribute_types)
		self.assertEqual(schema.attribute_types['uniqueMember'].oid, '2.5.4.50')
		self.assertIn('userId', schema.attribute_types)
		self.assertEqual(schema.attribute_types['userId'].oid, '0.9.2342.19200300.100.1.1')
		self.assertIn('userPassword', schema.attribute_types)
		self.assertEqual(schema.attribute_types['userPassword'].oid, '2.5.4.35')
		self.assertIn('x121Address', schema.attribute_types)
		self.assertEqual(schema.attribute_types['x121Address'].oid, '2.5.4.24')
		self.assertIn('x500UniqueIdentifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['x500UniqueIdentifier'].oid, '2.5.4.45')
		# Object classes
		self.assertIn('applicationProcess', schema.object_classes)
		self.assertEqual(schema.object_classes['applicationProcess'].oid, '2.5.6.11')
		self.assertIn('country', schema.object_classes)
		self.assertEqual(schema.object_classes['country'].oid, '2.5.6.2')
		self.assertIn('dcObject', schema.object_classes)
		self.assertEqual(schema.object_classes['dcObject'].oid, '1.3.6.1.4.1.1466.344')
		self.assertIn('device', schema.object_classes)
		self.assertEqual(schema.object_classes['device'].oid, '2.5.6.14')
		self.assertIn('groupOfNames', schema.object_classes)
		self.assertEqual(schema.object_classes['groupOfNames'].oid, '2.5.6.9')
		self.assertIn('groupOfUniqueNames', schema.object_classes)
		self.assertEqual(schema.object_classes['groupOfUniqueNames'].oid, '2.5.6.17')
		self.assertIn('locality', schema.object_classes)
		self.assertEqual(schema.object_classes['locality'].oid, '2.5.6.3')
		self.assertIn('organization', schema.object_classes)
		self.assertEqual(schema.object_classes['organization'].oid, '2.5.6.4')
		self.assertIn('organizationalPerson', schema.object_classes)
		self.assertEqual(schema.object_classes['organizationalPerson'].oid, '2.5.6.7')
		self.assertIn('organizationalRole', schema.object_classes)
		self.assertEqual(schema.object_classes['organizationalRole'].oid, '2.5.6.8')
		self.assertIn('organizationalUnit', schema.object_classes)
		self.assertEqual(schema.object_classes['organizationalUnit'].oid, '2.5.6.5')
		self.assertIn('person', schema.object_classes)
		self.assertEqual(schema.object_classes['person'].oid, '2.5.6.6')
		self.assertIn('residentialPerson', schema.object_classes)
		self.assertEqual(schema.object_classes['residentialPerson'].oid, '2.5.6.10')
		self.assertIn('uidObject', schema.object_classes)
		self.assertEqual(schema.object_classes['uidObject'].oid, '1.3.6.1.1.3.1')

	def test_rfc4523(self):
		schema = ldapserver.schema.RFC4523_SCHEMA
		# Attribute types
		self.assertIn('authorityRevocationList', schema.attribute_types)
		self.assertEqual(schema.attribute_types['authorityRevocationList'].oid, '2.5.4.38')
		self.assertIn('cACertificate', schema.attribute_types)
		self.assertEqual(schema.attribute_types['cACertificate'].oid, '2.5.4.37')
		self.assertIn('certificateRevocationList', schema.attribute_types)
		self.assertEqual(schema.attribute_types['certificateRevocationList'].oid, '2.5.4.39')
		self.assertIn('crossCertificatePair', schema.attribute_types)
		self.assertEqual(schema.attribute_types['crossCertificatePair'].oid, '2.5.4.40')
		self.assertIn('deltaRevocationList', schema.attribute_types)
		self.assertEqual(schema.attribute_types['deltaRevocationList'].oid, '2.5.4.53')
		self.assertIn('supportedAlgorithms', schema.attribute_types)
		self.assertEqual(schema.attribute_types['supportedAlgorithms'].oid, '2.5.4.52')
		self.assertIn('userCertificate', schema.attribute_types)
		self.assertEqual(schema.attribute_types['userCertificate'].oid, '2.5.4.36')
		# Object class
		self.assertIn('certificationAuthority', schema.object_classes)
		self.assertEqual(schema.object_classes['certificationAuthority'].oid, '2.5.6.16')
		self.assertIn('certificationAuthority-V2', schema.object_classes)
		self.assertEqual(schema.object_classes['certificationAuthority-V2'].oid, '2.5.6.16.2')
		self.assertIn('cRLDistributionPoint', schema.object_classes)
		self.assertEqual(schema.object_classes['cRLDistributionPoint'].oid, '2.5.6.19')
		self.assertIn('deltaCRL', schema.object_classes)
		self.assertEqual(schema.object_classes['deltaCRL'].oid, '2.5.6.23')
		self.assertIn('pkiCA', schema.object_classes)
		self.assertEqual(schema.object_classes['pkiCA'].oid, '2.5.6.22')
		self.assertIn('pkiUser', schema.object_classes)
		self.assertEqual(schema.object_classes['pkiUser'].oid, '2.5.6.21')
		self.assertIn('strongAuthenticationUser', schema.object_classes)
		self.assertEqual(schema.object_classes['strongAuthenticationUser'].oid, '2.5.6.15')
		self.assertIn('userSecurityInformation', schema.object_classes)
		self.assertEqual(schema.object_classes['userSecurityInformation'].oid, '2.5.6.18')

	def test_rfc4524(self):
		schema = ldapserver.schema.RFC4524_SCHEMA
		# Attribute types
		self.assertIn('associatedDomain', schema.attribute_types)
		self.assertEqual(schema.attribute_types['associatedDomain'].oid, '0.9.2342.19200300.100.1.37')
		self.assertIn('associatedName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['associatedName'].oid, '0.9.2342.19200300.100.1.38')
		self.assertIn('buildingName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['buildingName'].oid, '0.9.2342.19200300.100.1.48')
		self.assertIn('co', schema.attribute_types)
		self.assertEqual(schema.attribute_types['co'].oid, '0.9.2342.19200300.100.1.43')
		self.assertIn('documentAuthor', schema.attribute_types)
		self.assertEqual(schema.attribute_types['documentAuthor'].oid, '0.9.2342.19200300.100.1.14')
		self.assertIn('documentIdentifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['documentIdentifier'].oid, '0.9.2342.19200300.100.1.11')
		self.assertIn('documentLocation', schema.attribute_types)
		self.assertEqual(schema.attribute_types['documentLocation'].oid, '0.9.2342.19200300.100.1.15')
		self.assertIn('documentPublisher', schema.attribute_types)
		self.assertEqual(schema.attribute_types['documentPublisher'].oid, '0.9.2342.19200300.100.1.56')
		self.assertIn('documentTitle', schema.attribute_types)
		self.assertEqual(schema.attribute_types['documentTitle'].oid, '0.9.2342.19200300.100.1.12')
		self.assertIn('documentVersion', schema.attribute_types)
		self.assertEqual(schema.attribute_types['documentVersion'].oid, '0.9.2342.19200300.100.1.13')
		self.assertIn('drink', schema.attribute_types)
		self.assertEqual(schema.attribute_types['drink'].oid, '0.9.2342.19200300.100.1.5')
		self.assertIn('homePhone', schema.attribute_types)
		self.assertEqual(schema.attribute_types['homePhone'].oid, '0.9.2342.19200300.100.1.20')
		self.assertIn('homePostalAddress', schema.attribute_types)
		self.assertEqual(schema.attribute_types['homePostalAddress'].oid, '0.9.2342.19200300.100.1.39')
		self.assertIn('host', schema.attribute_types)
		self.assertEqual(schema.attribute_types['host'].oid, '0.9.2342.19200300.100.1.9')
		self.assertIn('info', schema.attribute_types)
		self.assertEqual(schema.attribute_types['info'].oid, '0.9.2342.19200300.100.1.4')
		self.assertIn('mail', schema.attribute_types)
		self.assertEqual(schema.attribute_types['mail'].oid, '0.9.2342.19200300.100.1.3')
		self.assertIn('manager', schema.attribute_types)
		self.assertEqual(schema.attribute_types['manager'].oid, '0.9.2342.19200300.100.1.10')
		self.assertIn('mobile', schema.attribute_types)
		self.assertEqual(schema.attribute_types['mobile'].oid, '0.9.2342.19200300.100.1.41')
		self.assertIn('organizationalStatus', schema.attribute_types)
		self.assertEqual(schema.attribute_types['organizationalStatus'].oid, '0.9.2342.19200300.100.1.45')
		self.assertIn('pager', schema.attribute_types)
		self.assertEqual(schema.attribute_types['pager'].oid, '0.9.2342.19200300.100.1.42')
		self.assertIn('personalTitle', schema.attribute_types)
		self.assertEqual(schema.attribute_types['personalTitle'].oid, '0.9.2342.19200300.100.1.40')
		self.assertIn('roomNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['roomNumber'].oid, '0.9.2342.19200300.100.1.6')
		self.assertIn('secretary', schema.attribute_types)
		self.assertEqual(schema.attribute_types['secretary'].oid, '0.9.2342.19200300.100.1.21')
		# RFC4524 does not define singleLevelQuality
		#self.assertIn('singleLevelQuality', schema.attribute_types)
		#self.assertEqual(schema.attribute_types['singleLevelQuality'].oid, '0.9.2342.19200300.100.1.50')
		self.assertIn('uniqueIdentifier', schema.attribute_types)
		self.assertEqual(schema.attribute_types['uniqueIdentifier'].oid, '0.9.2342.19200300.100.1.44')
		self.assertIn('userClass', schema.attribute_types)
		self.assertEqual(schema.attribute_types['userClass'].oid, '0.9.2342.19200300.100.1.8')
		# Object class
		self.assertIn('account', schema.object_classes)
		self.assertEqual(schema.object_classes['account'].oid, '0.9.2342.19200300.100.4.5')
		self.assertIn('document', schema.object_classes)
		self.assertEqual(schema.object_classes['document'].oid, '0.9.2342.19200300.100.4.6')
		# RFC4524 is inconsistent regarding RFC4524:
		# - It defines the attribute type with 0.9.2342.19200300.100.4.8
		# - It updates the IANA registration with 0.9.2342.19200300.100.4.9
		self.assertIn('documentSeries', schema.object_classes)
		self.assertEqual(schema.object_classes['documentSeries'].oid, '0.9.2342.19200300.100.4.9')
		self.assertIn('domain', schema.object_classes)
		self.assertEqual(schema.object_classes['domain'].oid, '0.9.2342.19200300.100.4.13')
		self.assertIn('domainRelatedObject', schema.object_classes)
		self.assertEqual(schema.object_classes['domainRelatedObject'].oid, '0.9.2342.19200300.100.4.17')
		self.assertIn('friendlyCountry', schema.object_classes)
		self.assertEqual(schema.object_classes['friendlyCountry'].oid, '0.9.2342.19200300.100.4.18')
		self.assertIn('RFC822LocalPart', schema.object_classes)
		self.assertEqual(schema.object_classes['RFC822LocalPart'].oid, '0.9.2342.19200300.100.4.14')
		self.assertIn('room', schema.object_classes)
		self.assertEqual(schema.object_classes['room'].oid, '0.9.2342.19200300.100.4.7')
		self.assertIn('simpleSecurityObject', schema.object_classes)
		self.assertEqual(schema.object_classes['simpleSecurityObject'].oid, '0.9.2342.19200300.100.4.19')

	def test_rfc2079(self):
		schema = ldapserver.schema.RFC2079_SCHEMA
		# Attribute types
		self.assertIn('labeledURI', schema.attribute_types)
		self.assertEqual(schema.attribute_types['labeledURI'].oid, '1.3.6.1.4.1.250.1.57')
		# Object class
		self.assertIn('labeledURIObject', schema.object_classes)
		self.assertEqual(schema.object_classes['labeledURIObject'].oid, '1.3.6.1.4.1.250.3.15')

	def test_rfc2798(self):
		schema = ldapserver.schema.RFC2798_SCHEMA
		# Attribute types
		self.assertIn('carLicense', schema.attribute_types)
		self.assertEqual(schema.attribute_types['carLicense'].oid, '2.16.840.1.113730.3.1.1')
		self.assertIn('departmentNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['departmentNumber'].oid, '2.16.840.1.113730.3.1.2')
		self.assertIn('displayName', schema.attribute_types)
		self.assertEqual(schema.attribute_types['displayName'].oid, '2.16.840.1.113730.3.1.241')
		self.assertIn('employeeNumber', schema.attribute_types)
		self.assertEqual(schema.attribute_types['employeeNumber'].oid, '2.16.840.1.113730.3.1.3')
		self.assertIn('employeeType', schema.attribute_types)
		self.assertEqual(schema.attribute_types['employeeType'].oid, '2.16.840.1.113730.3.1.4')
		self.assertIn('jpegPhoto', schema.attribute_types)
		self.assertEqual(schema.attribute_types['jpegPhoto'].oid, '0.9.2342.19200300.100.1.60')
		self.assertIn('preferredLanguage', schema.attribute_types)
		self.assertEqual(schema.attribute_types['preferredLanguage'].oid, '2.16.840.1.113730.3.1.39')
		self.assertIn('userPKCS12', schema.attribute_types)
		self.assertEqual(schema.attribute_types['userPKCS12'].oid, '2.16.840.1.113730.3.1.216')
		self.assertIn('userSMIMECertificate', schema.attribute_types)
		self.assertEqual(schema.attribute_types['userSMIMECertificate'].oid, '2.16.840.1.113730.3.1.40')
		# Object class
		self.assertIn('inetOrgPerson', schema.object_classes)
		self.assertEqual(schema.object_classes['inetOrgPerson'].oid, '2.16.840.1.113730.3.2.2')
